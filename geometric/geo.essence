language ESSENCE 2.4.0

given n : int
letting N be domain int(0..n-1)

find M : function (total) (N,N) --> N
find J : function (total) (N,N) --> N

such that

$Associative
forAll i,j,k: N. M((i,M((j,k)))) = M((M((i,j)),k)),
forAll i,j,k: N. J((i,J((j,k)))) = J((J((i,j)),k)),

$Commutative
forAll i,j: N. M((i,j)) = M((j,i)),
forAll i,j: N. J((i,j)) = J((j,i)),

$Absorption
forAll i,j: N. M((i,J((i,j)))) = i,
forAll i,j: N. J((i,M((i,j)))) = i,

$Bounded
forAll i : N. M((n-1,i)) = i,
forAll i : N. J((0,i)) = i,

$Ranked
forAll i,j : N. ((J((i,j)) = i)/\(i >= j)) \/ !(J((i,j)) = i),

$Semi-modular, Maclane condition 1
forAll i,j,k: N. ((J((j,k)) < i) /\ (i < k) /\ (k < M((i,j))) /\
                 (exists d: N. (
                                (J((j,k)) < d) /\ (d <= j) /\
                                (i = J((M((i,d)),k)))) 
                                )
                 ) \/ !((J((j,k)) < i) /\ (i < k) /\ (k < M((i,j)))),

$Atomistic
forAll i: N. (i = 0) \/
             !(exists j:N. (M((i,j)) = j) /\ !(i = j) /\ !(j = 0)) \/ 
             (exists j,k: N. (J((j,k)) = i) /\ !(j = i) /\ !(k = i))
