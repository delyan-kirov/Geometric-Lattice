language ESSENCE 2.4.0

given n : int
letting N be domain int(0..n-1)

find M : function (total) (N,N) --> N
find J : function (total) (N,N) --> N
find C : function (total) (N,N) --> int(0..1)

such that

$Associative
forAll i,j,k: N. M((i,M((j,k)))) = M((M((i,j)),k)),
forAll i,j,k: N. J((i,J((j,k)))) = J((J((i,j)),k)),

$Commutative
forAll i,j: N. M((i,j)) = M((j,i)),
forAll i,j: N. J((i,j)) = J((j,i)),

$Absorption
forAll i,j: N. M((i,J((i,j)))) = i,
forAll i,j: N. J((i,M((i,j)))) = i,

$Idempotent
forAll i: N. M((i,i)) = i,
forAll i: N. J((i,i)) = i,

$Bounded
forAll i : N. M((n-1,i)) = i,
forAll i : N. J((0,i)) = i,

$Distributive
forAll i,j,k : N. M((k,J((i,j)))) = J((M((i,k)), M((j,k)))),
forAll i,j,k : N. J((k,M((i,j)))) = M((J((i,k)), J((j,k)))),

$Complement
forAll i : N. exists j:N. (J((i,j)) = n-1) /\ (M((i,j)) = 0),

$Symmetry breaking 
forAll i,j : N. (J((i,j)) = i) -> (i >= j),

$Cover relation
forAll i,j:N. (C((i,j)) = 1) <-> ((J((i,j)) = i) /\ !(i = j) /\ !(exists k : N. !(i = k) /\ !(j = k) /\ (J((i, k)) = i) /\ (J((k,j)) = k))),

$Lexicographic constraints








